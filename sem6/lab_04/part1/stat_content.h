#ifndef STAT_CONTENT_H
#define STAT_CONTENT_H

char *content[] =
{
    "pid - %s\nУникальный идентификатор процесса.\n\n",
    "comm - %s\nИмя исполняемого файла в круглых скобках.\n\n",
    "state - %s\nСостояние процесса.\n\n",
    "ppid - %s\nУникальный идентификатор процесса-предка.\n\n",
    "pgrp - %s\nУникальный идентификатор группы.\n\n",
    "session - %s\nУникальный идентификатор сессии.\n\n",
    "tty_nr - %s\nУправляющий терминал.\n\n",
    "tpgid - %s\nУникальный идентификатор группы управляющего терминала.\n\n",
    "flags - %s\nФлаги.\n\n",
    "minflt - %s\nКоличество незначительных сбоев, которые возникли при выполнении процесса, и которые не требуют загрузки страницы памяти с диска.\n\n",
    "cminflt - %s\nКоличество незначительных сбоев, которые возникли при ожидании окончания работы процессов-потомков.\n\n",
    "majflt - %s\nКоличество значительных сбоев, которые возникли при работе процесса, и которые потребовали загрузки страницы памяти с диска.\n\n",
    "cmajflt - %s\nКоличество значительных сбоев, которые возникли при ожидании окончания работы процессов-потомков.\n\n",
    "utime - %s\nКоличество тиков, которые данный процесс провел в режиме пользователя.\n\n",
    "stime - %s\nКоличество тиков, которые данный процесс провел в режиме ядра.\n\n",
    "cutime - %s\nКоличество тиков, которые процесс, ожидающий завершения процессов-потомков, провёл в режиме пользователя.\n\n",
    "cstime - %s\nКоличество тиков, которые процесс, ожидающий завершения процессов-потомков, провёл в режиме ядра.\n\n",
    "priority - %s\nДля процессов реального времени это отрицательный приоритет планирования минус один, то есть число в диапазоне от -2 до -100, соответствующее приоритетам в реальном времени от 1 до 99. Для остальных процессов это необработанное значение nice, представленное в ядре. Ядро хранит значения nice в виде чисел в диапазоне от 0 (высокий) до 39 (низкий), соответствующих видимому пользователю диапазону от -20 до 19.\n\n",
    "nice - %s\nЗначение для nice в диапазоне от 19 (наиболее низкий приоритет) до -20 (наивысший приоритет).\n\n",
    "num_threads - %s\nЧисло потоков в данном процессе.\n\n",
    "itrealvalue - %s\nКоличество мигов до того, как следующий SIGALARM будет послан процессу интервальным таймером. С ядра версии 2.6.17 больше не поддерживается и установлено в 0.\n\n",
    "starttime - %s\nВремя в тиках запуска процесса после начальной загрузки системы.\n\n",
    "vsize - %s\nРазмер виртуальной памяти в байтах.\n\n",
    "rss - %s\nРезидентный размер: количество страниц, которые занимает процесс в памяти. Это те страницы, которые заняты кодом, данными и пространством стека. Сюда не включаются страницы, которые не были загружены по требованию или которые находятся в своппинге.\n\n",
    "rsslim - %s\nТекущий лимит в байтах на резидентный размер процесса.\n\n",
    "startcode - %s\nАдрес, выше которого может выполняться код программы.\n\n",
    "endcode - %s\nАдрес, ниже которого может выполняться код программ.\n\n",
    "startstack - %s\nАдрес начала стека.\n\n",
    "kstkesp - %s\nТекущее значение ESP (указателя стека).\n\n",
    "kstkeip - %s\nТекущее значение EIP (указатель команд).\n\n",
    "signal - %s\nБитовая карта ожидающих сигналов. Устарела, потому что не предоставляет информацию о сигналах реального времени, необходимо использовать /proc/[pid]/status.\n\n",
    "blocked - %s\nБитовая карта блокируемых сигналов. Устарела, потому что не предоставляет информацию о сигналах реального времени, необходимо использовать /proc/[pid]/status.\n\n",
    "sigignore - %s\nБитовая карта игнорируемых сигналов. Устарела, потому что не предоставляет информацию о сигналах реального времени, необходимо использовать /proc/[pid]/status.\n\n",
    "sigcatch - %s\nБитовая карта перехватываемых сигналов. Устарела, потому что не предоставляет информацию о сигналах реального времени, необходимо использовать /proc/[pid]/status.\n\n",
    "wchan - %s\nКанал, в котором ожидает процесс.\n\n",
    "nswap - %s\nКоличество страниц на своппинге (не обслуживается).\n\n",
    "сnswap - %s\nСуммарное nswap для процессов-потомков (не обслуживается).\n\n",
    "exit_signal - %s\nСигнал, который будет послан предку, когда процесс завершится.\n\n",
    "processor - %s\nНомер процессора, на котором последний раз выполнялся процесс.\n\n",
    "rt_priority - %s\nПриоритет планирования реального времени, число в диапазоне от 1 до 99 для процессов реального времени, 0 для остальных.\n\n",
    "policy - %s\nПолитика планирования.\n\n",
    "delayacct_blkio_ticks - %s\nСуммарные задержки ввода/вывода в тиках.\n\n",
    "guest_time - %s\nГостевое время процесса (время, потраченное на выполнение виртуального процессора на гостевой операционной системе) в тиках.\n\n",
    "cguest_time - %s\nГостевое время для потомков процесса в тиках.\n\n",
    "start_data - %s\nАдрес, выше которого размещаются инициализированные и неинициализированные (BSS) данные программы.\n\n",
    "end_data - %s\nАдрес, ниже которого размещаются инициализированные и неинициализированные (BSS) данные программы.\n\n",
    "start_brk - %s\nАдрес, выше которого куча программы может быть расширена с использованием brk().\n\n",
    "arg_start - %s\nАдрес, выше которого размещаются аргументы командной строки (argv).\n\n",
    "arg_end - %s\nАдрес, ниже которого размещаются аргументы командной строки (argv).\n\n",
    "env_start - %s\nАдрес, выше которого размещается окружение программы.\n\n",
    "env_end  - %s\nАдрес, ниже которого размещается окружение программы.\n\n",
    "exit_code - %s\nСтатус завершения потока в форме, возвращаемой waitpid().\n\n"
};

#endif
